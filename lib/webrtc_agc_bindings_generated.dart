// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/webrtc_agc.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class WebrtcAgcBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WebrtcAgcBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WebrtcAgcBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> webrtc_agc_init(
    int minLevel,
    int maxLevel,
    int sampleRate,
    int mode,
  ) {
    return _webrtc_agc_init(
      minLevel,
      maxLevel,
      sampleRate,
      mode,
    );
  }

  late final _webrtc_agc_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('webrtc_agc_init');
  late final _webrtc_agc_init = _webrtc_agc_initPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int, int)>();

  int webrtc_agc_set_config(
    ffi.Pointer<ffi.Void> handle,
    int targetLevelDbfs,
    int compressionGaindB,
    int limiterEnable,
  ) {
    return _webrtc_agc_set_config(
      handle,
      targetLevelDbfs,
      compressionGaindB,
      limiterEnable,
    );
  }

  late final _webrtc_agc_set_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Int)>>('webrtc_agc_set_config');
  late final _webrtc_agc_set_config = _webrtc_agc_set_configPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  int webrtc_agc_process(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Int16> src_audio_data,
    int length,
  ) {
    return _webrtc_agc_process(
      handle,
      src_audio_data,
      length,
    );
  }

  late final _webrtc_agc_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int16>,
              ffi.Int64)>>('webrtc_agc_process');
  late final _webrtc_agc_process = _webrtc_agc_processPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int16>, int)>();

  void webrtc_agc_destroy(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _webrtc_agc_destroy(
      handle,
    );
  }

  late final _webrtc_agc_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'webrtc_agc_destroy');
  late final _webrtc_agc_destroy =
      _webrtc_agc_destroyPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}
